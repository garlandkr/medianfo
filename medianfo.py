"""
Gather information about media based on nfo and mplayer output
This script assumes a <Media Name>.nfo in the directory exists
NFO files are typically generated by media scrapers for XBMC

For example:
'/Volumes/Videos/Movies/Superbad (2007)/Superbad.nfo'

Also for the GoogleDocs portion to work you'll have to setup
a spreadsheet, get the keyname and worksheet id, then create
the columns as expected. There is no error checking.

Project Page - http://code.google.com/p/medianfo/
Author: Ken Garland
License: GPLv3
"""

import re
import os
import subprocess

import gdata.spreadsheet.service

movies = {}

# Root directory to scan media
media_dir = "/Volumes/Videos/Movies"

# Total count of movies in directory
total_movies = int(len(os.walk(media_dir).next()[1]))
total_movies_countdown = total_movies

# Google setup
GoogleUser = ""
GooglePW = ""
GSheetID = ""
GWorkID = ""


def GSheetService(user,pwd):
    gd_client = gdata.spreadsheet.service.SpreadsheetsService()
    gd_client.email = user
    gd_client.password = pwd
    gd_client.source = 'Media NFO'
    gd_client.ProgrammaticLogin()
    
    return gd_client

# Connecting to Google docs service
try:
    gs = GSheetService(GoogleUser,GooglePW)
    print "Connected to Google Docs"
except Exception, e:
    print "Failed connection - %s" % e

# Gathering spreadsheet information from atom feed
sheets = gs.GetSpreadsheetsFeed()

# This is how we know which files to play in mplayer, add more types if needed
file_types = ('mkv', 'avi', 'm4v', 'mp4', 'wmv', 'mpg')

# Traverse the media directories for the stuff we want
for root,subfolders,files in os.walk(media_dir):
    for filename in files:
        if re.search('.*\.nfo', filename):
            movie_name = filename[:-4]
            movies[movie_name] = {'nfo': filename}
            movies[movie_name]['dir'] = root

print "Finished walking media folder."

# Parse it out with mplayer
for movie in movies:
    total_movies_countdown -= 1
    print "Parsing:  %s - Remaining: %d of %d" % (movie, total_movies_countdown, total_movies)
    files = os.walk(movies[movie]['dir']).next()[2]
    for filename in files:
        try:
            if filename[-3:] in file_types:
                movies[movie]['file'] = filename
                p = subprocess.Popen(['mplayer', '-identify', '-frames', '0', '-ao', 'null', '-vo', 'null', movies[movie]['dir']+"/"+movies[movie]['file']], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                temp_list = []
                for line in p.stdout:
                    temp_list.append(line.strip())
                for line in temp_list:
                    if "ID_AUDIO_CODEC" in line:
                        movies[movie]['audiocodec'] = line.split("=")[1]
                    elif "ID_VIDEO_FORMAT" in line:
                        movies[movie]['videoformat'] = line.split("=")[1]
                    elif "ID_DEMUXER" in line:
                        movies[movie]['demuxer'] = line.split("=")[1]
                    elif "ID_VIDEO_WIDTH" in line:
                        movies[movie]['width'] = line.split("=")[1]
                    elif "ID_VIDEO_HEIGHT" in line:
                        movies[movie]['height'] = line.split("=")[1]
                    elif "ID_LENGTH" in line:
                        movies[movie]['length'] = "%.f" % (float(line.split("=")[1])/60)
                    elif "ID_SEEKABLE" in line:
                        seekable = line.split("=")[1]
                        if seekable == "1":
                            movies[movie]['seekable'] = "yes"
                        else:
                            movies[movie]['seekable'] = "no"
                    elif "Opening video decoder:" in line:
                        movies[movie]['openingvideodecoder'] = line.split(": ", 1)[1]
                    elif "Selected video codec:" in line:
                        movies[movie]['selectedvideocodec'] = line.split(": ", 1)[1]
                    elif "ID_VIDEO_CODEC" in line:
                        movies[movie]['videocodec'] = line.split("=")[1]
                    elif "Opening audio decoder:" in line:
                        movies[movie]['openingaudiodecoder'] = line.split(": ", 1)[1]
                    elif "AUDIO: " in line:
                        movies[movie]['audio'] = line.split("AUDIO: ")[1]
                    elif "ID_AUDIO_BITRATE" in line:
                        movies[movie]['audiobitrate'] = line.split("=")[1]
                    elif "ID_AUDIO_RATE" in line:
                        movies[movie]['audiorate'] = line.split("=")[1]
                    elif "Selected audio codec:" in line:
                        movies[movie]['selectedaudiocodec'] = line.split(": ", 1)[1]
                    elif "AO:" in line:
                        movies[movie]['audiooutput'] = line.split("AO: ")[1]
                    elif "ID_AUDIO_CODEC" in line:
                        movies[movie]['audiocodec'] = line.split("=")[1]
        except Exception, e:
            # Interactive debugging on Exception, quit to exit
            import pdb; pdb.set_trace()

    # The next block of code is for inserting rows into the worksheet.
    GDataStore = {'name': movie}
    for k,v in movies[movie].iteritems():
        GDataStore[k] = v
    try:
        gs.InsertRow(GDataStore, GSheetID, GWorkID)
        print "Inserting row: %s" % movie
    except Exception, e:
        print "Unable to insert: %s - %s" % (movie, e)
        import pdb; pdb.set_trace()

